// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: datastruct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_datastruct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_datastruct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_datastruct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_datastruct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_datastruct_2eproto;
class HT_JD;
struct HT_JDDefaultTypeInternal;
extern HT_JDDefaultTypeInternal _HT_JD_default_instance_;
class student;
struct studentDefaultTypeInternal;
extern studentDefaultTypeInternal _student_default_instance_;
class wx_info;
struct wx_infoDefaultTypeInternal;
extern wx_infoDefaultTypeInternal _wx_info_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::HT_JD* Arena::CreateMaybeMessage<::HT_JD>(Arena*);
template<> ::student* Arena::CreateMaybeMessage<::student>(Arena*);
template<> ::wx_info* Arena::CreateMaybeMessage<::wx_info>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class student final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:student) */ {
 public:
  inline student() : student(nullptr) {}
  ~student() override;
  explicit PROTOBUF_CONSTEXPR student(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  student(const student& from);
  student(student&& from) noexcept
    : student() {
    *this = ::std::move(from);
  }

  inline student& operator=(const student& from) {
    CopyFrom(from);
    return *this;
  }
  inline student& operator=(student&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const student& default_instance() {
    return *internal_default_instance();
  }
  static inline const student* internal_default_instance() {
    return reinterpret_cast<const student*>(
               &_student_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(student& a, student& b) {
    a.Swap(&b);
  }
  inline void Swap(student* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(student* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  student* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<student>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const student& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const student& from) {
    student::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(student* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "student";
  }
  protected:
  explicit student(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kIDFieldNumber = 3,
    kAgeFieldNumber = 2,
    kMoneyFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string ID = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int32 age = 2;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // float money = 4;
  void clear_money();
  float money() const;
  void set_money(float value);
  private:
  float _internal_money() const;
  void _internal_set_money(float value);
  public:

  // @@protoc_insertion_point(class_scope:student)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int32_t age_;
    float money_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datastruct_2eproto;
};
// -------------------------------------------------------------------

class wx_info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wx_info) */ {
 public:
  inline wx_info() : wx_info(nullptr) {}
  ~wx_info() override;
  explicit PROTOBUF_CONSTEXPR wx_info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  wx_info(const wx_info& from);
  wx_info(wx_info&& from) noexcept
    : wx_info() {
    *this = ::std::move(from);
  }

  inline wx_info& operator=(const wx_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline wx_info& operator=(wx_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const wx_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const wx_info* internal_default_instance() {
    return reinterpret_cast<const wx_info*>(
               &_wx_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(wx_info& a, wx_info& b) {
    a.Swap(&b);
  }
  inline void Swap(wx_info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(wx_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  wx_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<wx_info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const wx_info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const wx_info& from) {
    wx_info::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(wx_info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wx_info";
  }
  protected:
  explicit wx_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIDFieldNumber = 2,
    kAgeFieldNumber = 1,
    kMoneyFieldNumber = 3,
  };
  // string ID = 2;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int32 age = 1;
  void clear_age();
  int32_t age() const;
  void set_age(int32_t value);
  private:
  int32_t _internal_age() const;
  void _internal_set_age(int32_t value);
  public:

  // float money = 3;
  void clear_money();
  float money() const;
  void set_money(float value);
  private:
  float _internal_money() const;
  void _internal_set_money(float value);
  public:

  // @@protoc_insertion_point(class_scope:wx_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    int32_t age_;
    float money_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datastruct_2eproto;
};
// -------------------------------------------------------------------

class HT_JD final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HT_JD) */ {
 public:
  inline HT_JD() : HT_JD(nullptr) {}
  ~HT_JD() override;
  explicit PROTOBUF_CONSTEXPR HT_JD(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HT_JD(const HT_JD& from);
  HT_JD(HT_JD&& from) noexcept
    : HT_JD() {
    *this = ::std::move(from);
  }

  inline HT_JD& operator=(const HT_JD& from) {
    CopyFrom(from);
    return *this;
  }
  inline HT_JD& operator=(HT_JD&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HT_JD& default_instance() {
    return *internal_default_instance();
  }
  static inline const HT_JD* internal_default_instance() {
    return reinterpret_cast<const HT_JD*>(
               &_HT_JD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HT_JD& a, HT_JD& b) {
    a.Swap(&b);
  }
  inline void Swap(HT_JD* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HT_JD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HT_JD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HT_JD>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HT_JD& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HT_JD& from) {
    HT_JD::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HT_JD* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HT_JD";
  }
  protected:
  explicit HT_JD(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfosFieldNumber = 2,
    kWxNameFieldNumber = 1,
  };
  // repeated .wx_info infos = 2;
  int infos_size() const;
  private:
  int _internal_infos_size() const;
  public:
  void clear_infos();
  ::wx_info* mutable_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wx_info >*
      mutable_infos();
  private:
  const ::wx_info& _internal_infos(int index) const;
  ::wx_info* _internal_add_infos();
  public:
  const ::wx_info& infos(int index) const;
  ::wx_info* add_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wx_info >&
      infos() const;

  // string wx_name = 1;
  void clear_wx_name();
  const std::string& wx_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_wx_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_wx_name();
  PROTOBUF_NODISCARD std::string* release_wx_name();
  void set_allocated_wx_name(std::string* wx_name);
  private:
  const std::string& _internal_wx_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_wx_name(const std::string& value);
  std::string* _internal_mutable_wx_name();
  public:

  // @@protoc_insertion_point(class_scope:HT_JD)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wx_info > infos_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wx_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_datastruct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// student

// string name = 1;
inline void student::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& student::name() const {
  // @@protoc_insertion_point(field_get:student.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void student::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:student.name)
}
inline std::string* student::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:student.name)
  return _s;
}
inline const std::string& student::_internal_name() const {
  return _impl_.name_.Get();
}
inline void student::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* student::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* student::release_name() {
  // @@protoc_insertion_point(field_release:student.name)
  return _impl_.name_.Release();
}
inline void student::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:student.name)
}

// int32 age = 2;
inline void student::clear_age() {
  _impl_.age_ = 0;
}
inline int32_t student::_internal_age() const {
  return _impl_.age_;
}
inline int32_t student::age() const {
  // @@protoc_insertion_point(field_get:student.age)
  return _internal_age();
}
inline void student::_internal_set_age(int32_t value) {
  
  _impl_.age_ = value;
}
inline void student::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:student.age)
}

// string ID = 3;
inline void student::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& student::id() const {
  // @@protoc_insertion_point(field_get:student.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void student::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:student.ID)
}
inline std::string* student::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:student.ID)
  return _s;
}
inline const std::string& student::_internal_id() const {
  return _impl_.id_.Get();
}
inline void student::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* student::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* student::release_id() {
  // @@protoc_insertion_point(field_release:student.ID)
  return _impl_.id_.Release();
}
inline void student::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:student.ID)
}

// float money = 4;
inline void student::clear_money() {
  _impl_.money_ = 0;
}
inline float student::_internal_money() const {
  return _impl_.money_;
}
inline float student::money() const {
  // @@protoc_insertion_point(field_get:student.money)
  return _internal_money();
}
inline void student::_internal_set_money(float value) {
  
  _impl_.money_ = value;
}
inline void student::set_money(float value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:student.money)
}

// -------------------------------------------------------------------

// wx_info

// int32 age = 1;
inline void wx_info::clear_age() {
  _impl_.age_ = 0;
}
inline int32_t wx_info::_internal_age() const {
  return _impl_.age_;
}
inline int32_t wx_info::age() const {
  // @@protoc_insertion_point(field_get:wx_info.age)
  return _internal_age();
}
inline void wx_info::_internal_set_age(int32_t value) {
  
  _impl_.age_ = value;
}
inline void wx_info::set_age(int32_t value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:wx_info.age)
}

// string ID = 2;
inline void wx_info::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& wx_info::id() const {
  // @@protoc_insertion_point(field_get:wx_info.ID)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void wx_info::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wx_info.ID)
}
inline std::string* wx_info::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:wx_info.ID)
  return _s;
}
inline const std::string& wx_info::_internal_id() const {
  return _impl_.id_.Get();
}
inline void wx_info::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* wx_info::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* wx_info::release_id() {
  // @@protoc_insertion_point(field_release:wx_info.ID)
  return _impl_.id_.Release();
}
inline void wx_info::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wx_info.ID)
}

// float money = 3;
inline void wx_info::clear_money() {
  _impl_.money_ = 0;
}
inline float wx_info::_internal_money() const {
  return _impl_.money_;
}
inline float wx_info::money() const {
  // @@protoc_insertion_point(field_get:wx_info.money)
  return _internal_money();
}
inline void wx_info::_internal_set_money(float value) {
  
  _impl_.money_ = value;
}
inline void wx_info::set_money(float value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:wx_info.money)
}

// -------------------------------------------------------------------

// HT_JD

// string wx_name = 1;
inline void HT_JD::clear_wx_name() {
  _impl_.wx_name_.ClearToEmpty();
}
inline const std::string& HT_JD::wx_name() const {
  // @@protoc_insertion_point(field_get:HT_JD.wx_name)
  return _internal_wx_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HT_JD::set_wx_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.wx_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HT_JD.wx_name)
}
inline std::string* HT_JD::mutable_wx_name() {
  std::string* _s = _internal_mutable_wx_name();
  // @@protoc_insertion_point(field_mutable:HT_JD.wx_name)
  return _s;
}
inline const std::string& HT_JD::_internal_wx_name() const {
  return _impl_.wx_name_.Get();
}
inline void HT_JD::_internal_set_wx_name(const std::string& value) {
  
  _impl_.wx_name_.Set(value, GetArenaForAllocation());
}
inline std::string* HT_JD::_internal_mutable_wx_name() {
  
  return _impl_.wx_name_.Mutable(GetArenaForAllocation());
}
inline std::string* HT_JD::release_wx_name() {
  // @@protoc_insertion_point(field_release:HT_JD.wx_name)
  return _impl_.wx_name_.Release();
}
inline void HT_JD::set_allocated_wx_name(std::string* wx_name) {
  if (wx_name != nullptr) {
    
  } else {
    
  }
  _impl_.wx_name_.SetAllocated(wx_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.wx_name_.IsDefault()) {
    _impl_.wx_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HT_JD.wx_name)
}

// repeated .wx_info infos = 2;
inline int HT_JD::_internal_infos_size() const {
  return _impl_.infos_.size();
}
inline int HT_JD::infos_size() const {
  return _internal_infos_size();
}
inline void HT_JD::clear_infos() {
  _impl_.infos_.Clear();
}
inline ::wx_info* HT_JD::mutable_infos(int index) {
  // @@protoc_insertion_point(field_mutable:HT_JD.infos)
  return _impl_.infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wx_info >*
HT_JD::mutable_infos() {
  // @@protoc_insertion_point(field_mutable_list:HT_JD.infos)
  return &_impl_.infos_;
}
inline const ::wx_info& HT_JD::_internal_infos(int index) const {
  return _impl_.infos_.Get(index);
}
inline const ::wx_info& HT_JD::infos(int index) const {
  // @@protoc_insertion_point(field_get:HT_JD.infos)
  return _internal_infos(index);
}
inline ::wx_info* HT_JD::_internal_add_infos() {
  return _impl_.infos_.Add();
}
inline ::wx_info* HT_JD::add_infos() {
  ::wx_info* _add = _internal_add_infos();
  // @@protoc_insertion_point(field_add:HT_JD.infos)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::wx_info >&
HT_JD::infos() const {
  // @@protoc_insertion_point(field_list:HT_JD.infos)
  return _impl_.infos_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_datastruct_2eproto
